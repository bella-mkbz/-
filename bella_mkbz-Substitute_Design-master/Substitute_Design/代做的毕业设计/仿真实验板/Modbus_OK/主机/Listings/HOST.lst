C51 COMPILER V9.60.0.0   HOST                                                              02/02/2020 11:52:01 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE HOST
OBJECT MODULE PLACED IN .\Objects\HOST.obj
COMPILER INVOKED BY: D:\software install\Keil_C51\C51\BIN\C51.EXE HOST.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRI
                    -NT(.\Listings\HOST.lst) TABS(2) OBJECT(.\Objects\HOST.obj)

line level    source

   1          /**************主机程序************/
   2          #include <reg51.h>
   3          #include <intrins.h>
   4          
   5          #define uint unsigned int
   6          #define uint32 unsigned long
   7          #define uchar  unsigned char
   8          
   9          sbit DIR=P3^4;
  10          
  11          void InitUART(void);
  12          void SendOneByte(unsigned);
  13          void mdproc(uchar);
  14          uint Crc16(uint *puchMsg, uint usDataLen); 
  15          
  16          
  17          /* CRC 高位字节值表 */ 
  18          const uint code auchCRCHi[] = { 
  19          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 
  20          0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
  21          0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 
  22          0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 
  23          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 
  24          0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 
  25          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 
  26          0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
  27          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 
  28          0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 
  29          0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 
  30          0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 
  31          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 
  32          0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 
  33          0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 
  34          0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 
  35          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 
  36          0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
  37          0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 
  38          0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
  39          0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 
  40          0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 
  41          0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 
  42          0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
  43          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 
  44          0x80, 0x41, 0x00, 0xC1, 0x81, 0x40 
  45          } ; 
  46          
  47          /* CRC低位字节值表*/ 
  48          const uint code auchCRCLo[] = { 
  49          0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 
  50          0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 
  51          0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 
  52          0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 
  53          0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4, 
  54          0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3, 
C51 COMPILER V9.60.0.0   HOST                                                              02/02/2020 11:52:01 PAGE 2   

  55          0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 
  56          0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4, 
  57          0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 
  58          0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 
  59          0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED, 
  60          0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26, 
  61          0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 
  62          0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 
  63          0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 
  64          0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 
  65          0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 
  66          0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 
  67          0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 
  68          0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 
  69          0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 
  70          0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 
  71          0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B, 
  72          0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C, 
  73          0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 
  74          0x43, 0x83, 0x41, 0x81, 0x80, 0x40 
  75          } ;
  76          uchar asknode; // the current node for polling(ask for data in turn)
  77          uchar mtx[8],mrx[7];
  78          uchar send101[]={0x01,0x03,0x00,0x01,0x00,0x01};
  79          uchar revptr;
  80          bit nodeok;
  81          bit crcok;
  82          uint delaycnt;
  83          
  84          void main(void)
  85          {
  86   1        uint temp16,temp16_1;
  87   1        int i;
  88   1        nodeok=0;
  89   1        asknode=0x00;
  90   1        for(i=0;i<7;i++){mrx[i]=0x00;}
  91   1        for(i=0;i<8;i++){mtx[i]=0x00;}
  92   1        delaycnt=0xffff;
  93   1        while(delaycnt--){}
  94   1        delaycnt=0xffff;
  95   1        while(delaycnt--){}
  96   1        InitUART();
  97   1      
  98   1        crcok=1;
  99   1        DIR=1; 
 100   1        while(1)
 101   1        { 
 102   2          if(crcok == 1)
 103   2          {       
 104   3            temp16_1=mrx[4];
 105   3            temp16_1 = (float)temp16_1/255*500;
 106   3            delaycnt=0x3ff;
 107   3            while(delaycnt--){}
 108   3            DIR=1;
 109   3            send101[0]=(asknode++)+0x01;  // rolling the node of SLAVE for polling
 110   3            asknode%=3;
 111   3            temp16=Crc16(send101,6);  // generate the CRC and save it in an 16bit var
*** WARNING C182 IN LINE 111 OF HOST.c: pointer to different objects
 112   3            for(i=0;i<6;i++)
 113   3            {
 114   4              mtx[i]=send101[i];
 115   4            }
C51 COMPILER V9.60.0.0   HOST                                                              02/02/2020 11:52:01 PAGE 3   

 116   3            mtx[6]=(temp16>>8)&0x00ff;
 117   3            mtx[7]=temp16&0x00ff;
 118   3            delaycnt=0x3ff;
 119   3            while(delaycnt--){}
 120   3            for(i=0;i<8;i++)
 121   3            { 
 122   4              SendOneByte(mtx[i]);
 123   4            }
 124   3            crcok=0;
 125   3            delaycnt=0x3ff;
 126   3            while(delaycnt--){}
 127   3            DIR=0;
 128   3          }
 129   2        }
 130   1      }
 131          
 132          void UARTInterrupt(void) interrupt 4
 133          { uchar byterev;
 134   1          if(RI)
 135   1          {
 136   2              RI = 0;
 137   2              byterev=SBUF;
 138   2              mdproc(byterev);
 139   2          }
 140   1          else
 141   1              TI = 0;
 142   1      }
 143          
 144          
 145          void mdproc(uchar b)
 146          { uint temp16_1,temp16_2;
 147   1        if(nodeok==0)
 148   1        { 
 149   2          if(b==send101[0])
 150   2          { nodeok=1;
 151   3            revptr=1;
 152   3            mrx[0]=b;
 153   3          }
 154   2        }
 155   1        else
 156   1        {
 157   2          mrx[revptr++]=b;
 158   2          if(revptr == 7)
 159   2          {
 160   3          revptr=0;
 161   3          nodeok=0;
 162   3          temp16_1=Crc16(mrx,5);
*** WARNING C182 IN LINE 162 OF HOST.c: pointer to different objects
 163   3          temp16_2=mrx[5];
 164   3          temp16_2<<=8;
 165   3          temp16_2 |= mrx[6];
 166   3          if(temp16_1 == temp16_2)
 167   3          {
 168   4            crcok=1;  
 169   4          }
 170   3          }
 171   2        }
 172   1      }
 173          
 174          
 175          
 176          void SendOneByte(unsigned char c)
C51 COMPILER V9.60.0.0   HOST                                                              02/02/2020 11:52:01 PAGE 4   

 177          {
*** WARNING C235 IN LINE 177 OF HOST.c: parameter 1: different types
 178   1          SBUF = c;
 179   1          while(!TI);
 180   1          TI = 0;
 181   1      }
 182          
 183          
 184          void InitUART(void)
 185          {
 186   1          TMOD = 0x20;
 187   1          SCON = 0x50;
 188   1          TH1 = 0xFD;
 189   1          TL1 = TH1;
 190   1          PCON = 0x00;
 191   1          EA = 1;
 192   1          ES = 1;
 193   1          TR1 = 1;
 194   1          
 195   1      }
 196          
 197          uint Crc16(uchar *puchMsg, uint usDataLen) 
 198          { 
*** WARNING C235 IN LINE 198 OF HOST.c: parameter 1: different types
 199   1        uint uchCRCHi = 0xFF ;              /* 高CRC字节初始化  */ 
 200   1        uint uchCRCLo = 0xFF ;              /* 低CRC 字节初始化 */ 
 201   1        uint temp16;
 202   1        uint32 uIndex ;                      /* CRC循环中的索引  */ 
 203   1        while (usDataLen--)                  /* 传输消息缓冲区   */ 
 204   1        { 
 205   2          temp16=*puchMsg++;
 206   2          uIndex = uchCRCHi ^ temp16 ; /* 计算CRC          */ 
 207   2          uchCRCHi = uchCRCLo ^ auchCRCHi[uIndex] ; 
 208   2          uchCRCLo = auchCRCLo[uIndex] ; 
 209   2        } 
 210   1        return (uchCRCHi << 8 | uchCRCLo) ; 
 211   1      }
 212          
 213          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    628    ----
   CONSTANT SIZE    =   1024    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     25      17
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  4 WARNING(S),  0 ERROR(S)
