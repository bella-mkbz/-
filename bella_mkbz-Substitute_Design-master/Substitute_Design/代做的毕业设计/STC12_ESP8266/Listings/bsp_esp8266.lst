C51 COMPILER V9.60.0.0   BSP_ESP8266                                                       02/11/2020 20:55:49 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE BSP_ESP8266
OBJECT MODULE PLACED IN .\Objects\bsp_esp8266.obj
COMPILER INVOKED BY: D:\software install\Keil_C51\C51\BIN\C51.EXE Lib\bsp_esp8266.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDI
                    -R(.\Lib) DEBUG OBJECTEXTEND PRINT(.\Listings\bsp_esp8266.lst) TABS(2) OBJECT(.\Objects\bsp_esp8266.obj)

line level    source

   1          #include "bsp_esp8266.h"
   2          
   3          static void                   ESP8266_USART_Config                ( void );
   4          static void                   ESP8266_USART_NVIC_Configuration    ( void );
   5          
   6          struct  STRUCT_USARTx_Fram strEsp8266_Fram_Record = { 0 };
   7          
   8          /**
   9            * @brief  ESP8266初始化函数
  10            * @param  无
  11            * @retval 无
  12            */
  13          void ESP8266_Init ( void )
  14          { 
  15   1        
  16   1        Uart2Init(); 
  17   1        
  18   1        UART1_SendString("正在配置 ESP8266 ......");
  19   1        
  20   1        ESP8266_ExitUnvarnishSend ();
  21   1      
  22   1        ESP8266_AT_Test ();
  23   1      
  24   1        ESP8266_Net_Mode_Choose ( STA );
  25   1      
  26   1        while ( ! ESP8266_JoinAP ( macUser_ESP8266_ApSsid, macUser_ESP8266_ApPwd ) ); 
  27   1      
  28   1        ESP8266_Enable_MultipleId ( DISABLE );
  29   1      
  30   1        while ( ! ESP8266_Link_Server ( enumTCP, macUser_ESP8266_TcpServer_IP, macUser_ESP8266_TcpServer_Port, Si
             -ngle_ID_0 ) );
  31   1      
  32   1        while ( ! ESP8266_UnvarnishSend () );
  33   1        
  34   1        UART1_SendString("配置 ESP8266 完毕");
  35   1      
  36   1        strEsp8266_Fram_Record .InfBit .FramLength = 0;
  37   1      
  38   1        strEsp8266_Fram_Record .InfBit .FramFinishFlag = 0;
  39   1      
  40   1        memset(strEsp8266_Fram_Record .Data_RX_BUF, 0, 40);
  41   1      }
  42          
  43          /*
  44           * 函数名：ESP8266_Cmd
  45           * 描述  ：对WF-ESP8266模块发送AT指令
  46           * 输入  ：cmd，待发送的指令
  47           *         reply1，reply2，期待的响应，为NULL表不需响应，两者为或逻辑关系
  48           *         waittime，等待响应的时间
  49           * 返回  : 1，指令发送成功
  50           *         0，指令发送失败
  51           * 调用  ：被外部调用
  52           */
  53          unsigned char ESP8266_Cmd ( char * cmd, char * reply1, char * reply2, u32 waittime )
C51 COMPILER V9.60.0.0   BSP_ESP8266                                                       02/11/2020 20:55:49 PAGE 2   

  54          {    
  55   1        strEsp8266_Fram_Record .InfBit .FramLength = 0;               //从新开始接收新的数据包
  56   1      
  57   1        memset(strEsp8266_Fram_Record .Data_RX_BUF, 0, 40);
  58   1        
  59   1        UART2_SendString(cmd);
  60   1      
  61   1        if ( ( reply1 == 0 ) && ( reply2 == 0 ) )                      //不需要接收数据
  62   1          return 1;
  63   1        
  64   1        delay_ms ( waittime );                 //延时
  65   1        
  66   1        strEsp8266_Fram_Record .Data_RX_BUF [ strEsp8266_Fram_Record .InfBit .FramLength ]  = '\0';
  67   1      
  68   1        //macPC_Usart ( "%s", strEsp8266_Fram_Record .Data_RX_BUF );
  69   1        UART1_SendString(strEsp8266_Fram_Record .Data_RX_BUF);
  70   1        
  71   1        if ( ( reply1 != 0 ) && ( reply2 != 0 ) )
  72   1          return ( ( unsigned char ) strstr ( strEsp8266_Fram_Record .Data_RX_BUF, reply1 ) || 
  73   1                   ( unsigned char ) strstr ( strEsp8266_Fram_Record .Data_RX_BUF, reply2 ) ); 
  74   1        
  75   1        else if ( reply1 != 0 )
  76   1          return ( ( unsigned char ) strstr ( strEsp8266_Fram_Record .Data_RX_BUF, reply1 ) );
  77   1        
  78   1        else
  79   1          return ( ( unsigned char ) strstr ( strEsp8266_Fram_Record .Data_RX_BUF, reply2 ) );
  80   1        
  81   1      }
  82          
  83          
  84          void ESP8266_AT_Test ( void )
  85          {
  86   1        char count=0;
  87   1        
  88   1        delay_ms ( 1000 );
  89   1        while ( count < 10 )
  90   1        {
  91   2          if( ESP8266_Cmd ( "AT", "OK", NULL, 500 ) ) return;
  92   2          ++ count;
  93   2        }
  94   1      }
  95          
  96          
  97          /*
  98           * 函数名：ESP8266_Net_Mode_Choose
  99           * 描述  ：选择WF-ESP8266模块的工作模式
 100           * 输入  ：enumMode，工作模式
 101           * 返回  : 1，选择成功
 102           *         0，选择失败
 103           * 调用  ：被外部调用
 104           */
 105          bit ESP8266_Net_Mode_Choose ( ENUM_Net_ModeTypeDef enumMode )
 106          {
 107   1        switch ( enumMode )
 108   1        {
 109   2          case STA:
 110   2            return ESP8266_Cmd ( "AT+CWMODE=1", "OK", "no change", 2500 ); 
 111   2          
 112   2          case AP:
 113   2            return ESP8266_Cmd ( "AT+CWMODE=2", "OK", "no change", 2500 ); 
 114   2          
 115   2          case STA_AP:
C51 COMPILER V9.60.0.0   BSP_ESP8266                                                       02/11/2020 20:55:49 PAGE 3   

 116   2            return ESP8266_Cmd ( "AT+CWMODE=3", "OK", "no change", 2500 ); 
 117   2          
 118   2          default:
 119   2            return 0;
 120   2        }
 121   1        
 122   1      }
 123          
 124          
 125          /*
 126           * 函数名：ESP8266_JoinAP
 127           * 描述  ：WF-ESP8266模块连接外部WiFi
 128           * 输入  ：pSSID，WiFi名称字符串
 129           *       ：pPassWord，WiFi密码字符串
 130           * 返回  : 1，连接成功
 131           *         0，连接失败
 132           * 调用  ：被外部调用
 133           */
 134          bit ESP8266_JoinAP ( char * pSSID, char * pPassWord )
 135          {
 136   1        char cCmd [30];
 137   1      
 138   1        sprintf ( cCmd, "AT+CWJAP=\"%s\",\"%s\"", pSSID, pPassWord );
 139   1        
 140   1        return ESP8266_Cmd ( cCmd, "OK", NULL, 5000 );
 141   1        
 142   1      }
 143          
 144          
 145          /*
 146           * 函数名：ESP8266_Enable_MultipleId
 147           * 描述  ：WF-ESP8266模块启动多连接
 148           * 输入  ：enumEnUnvarnishTx，配置是否多连接
 149           * 返回  : 1，配置成功
 150           *         0，配置失败
 151           * 调用  ：被外部调用
 152           */
 153          bit ESP8266_Enable_MultipleId ( FunctionalState enumEnUnvarnishTx )
 154          {
 155   1        char cStr [13];
 156   1        
 157   1        sprintf ( cStr, "AT+CIPMUX=%d", ( enumEnUnvarnishTx ? 1 : 0 ) );
 158   1        
 159   1        return ESP8266_Cmd ( cStr, "OK", 0, 500 );
 160   1        
 161   1      }
 162          
 163          
 164          /*
 165           * 函数名：ESP8266_Link_Server
 166           * 描述  ：WF-ESP8266模块连接外部服务器
 167           * 输入  ：enumE，网络协议
 168           *       ：ip，服务器IP字符串
 169           *       ：ComNum，服务器端口字符串
 170           *       ：id，模块连接服务器的ID
 171           * 返回  : 1，连接成功
 172           *         0，连接失败
 173           * 调用  ：被外部调用
 174           */
 175          bit ESP8266_Link_Server ( ENUM_NetPro_TypeDef enumE, char * ip, char * ComNum, ENUM_ID_NO_TypeDef id)
 176          {
 177   1        char cStr [35] = { 0 }, cCmd [50];
C51 COMPILER V9.60.0.0   BSP_ESP8266                                                       02/11/2020 20:55:49 PAGE 4   

 178   1      
 179   1        switch (  enumE )
 180   1        {
 181   2          case enumTCP:
 182   2            sprintf ( cStr, "\"%s\",\"%s\",%s", "TCP", ip, ComNum );
 183   2            break;
 184   2          
 185   2          case enumUDP:
 186   2            sprintf ( cStr, "\"%s\",\"%s\",%s", "UDP", ip, ComNum );
 187   2            break;
 188   2          
 189   2          default:
 190   2            break;
 191   2        }
 192   1      
 193   1        if ( id < 5 )
 194   1          sprintf ( cCmd, "AT+CIPSTART=%d,%s", id, cStr);
 195   1      
 196   1        else
 197   1          sprintf ( cCmd, "AT+CIPSTART=%s", cStr );
 198   1      
 199   1        return ESP8266_Cmd ( cCmd, "OK", "ALREAY CONNECT", 4000 );
 200   1        
 201   1      }
 202          
 203          
 204          /*
 205           * 函数名：ESP8266_UnvarnishSend
 206           * 描述  ：配置WF-ESP8266模块进入透传发送
 207           * 输入  ：无
 208           * 返回  : 1，配置成功
 209           *         0，配置失败
 210           * 调用  ：被外部调用
 211           */
 212          bit ESP8266_UnvarnishSend ( void )
 213          {
 214   1        if ( ! ESP8266_Cmd ( "AT+CIPMODE=1", "OK", 0, 1000 ) )
 215   1          return 0;
 216   1        
 217   1        return 
 218   1          ESP8266_Cmd ( "AT+CIPSEND", "OK", ">", 1000 );
 219   1        
 220   1      }
 221          
 222          
 223          /*
 224           * 函数名：ESP8266_ExitUnvarnishSend
 225           * 描述  ：配置WF-ESP8266模块退出透传模式
 226           * 输入  ：无
 227           * 返回  : 无
 228           * 调用  ：被外部调用
 229           */
 230          void ESP8266_ExitUnvarnishSend ( void )
 231          {
 232   1        delay_ms ( 1000 );
 233   1        
 234   1        UART2_SendString_P( "+++" );
 235   1        
 236   1        delay_ms ( 500 ); 
 237   1        
 238   1      }
 239          
C51 COMPILER V9.60.0.0   BSP_ESP8266                                                       02/11/2020 20:55:49 PAGE 5   

 240          /*
 241           * 函数名：ESP8266_SendString
 242           * 描述  ：WF-ESP8266模块发送字符串
 243           * 输入  ：enumEnUnvarnishTx，声明是否已使能了透传模式
 244           *       ：pStr，要发送的字符串
 245           *       ：ulStrLength，要发送的字符串的字节数
 246           *       ：ucId，哪个ID发送的字符串
 247           * 返回  : 1，发送成功
 248           *         0，发送失败
 249           * 调用  ：被外部调用
 250           */
 251          bit ESP8266_SendString ( FunctionalState enumEnUnvarnishTx, char * pStr, u32 ulStrLength, ENUM_ID_NO_TypeD
             -ef ucId )
 252          {
 253   1        char cStr [20];
 254   1        bit bRet = 0;
 255   1        
 256   1          
 257   1        if ( enumEnUnvarnishTx )
 258   1        {
 259   2          
 260   2          UART2_SendString( pStr );
 261   2          
 262   2          bRet = 1;
 263   2          
 264   2        }
 265   1      
 266   1        else
 267   1        {
 268   2          if ( ucId < 5 )
 269   2            sprintf ( cStr, "AT+CIPSEND=%d,%d", ucId, ulStrLength + 2 );
 270   2      
 271   2          else
 272   2            sprintf ( cStr, "AT+CIPSEND=%d", ulStrLength + 2 );
 273   2          
 274   2          ESP8266_Cmd ( cStr, "> ", 0, 1000 );
 275   2      
 276   2          bRet = ESP8266_Cmd ( pStr, "SEND OK", 0, 1000 );
 277   2        }
 278   1        
 279   1        return bRet;
 280   1      
 281   1      }
 282          
 283          /*
 284           * 函数名：ESP8266_Get_LinkStatus
 285           * 描述  ：获取 WF-ESP8266 的连接状态，较适合单端口时使用
 286           * 输入  ：无
 287           * 返回  : 2，获得ip
 288           *         3，建立连接
 289           *         3，失去连接
 290           *         0，获取状态失败
 291           * 调用  ：被外部调用
 292           */
 293          uint8_t ESP8266_Get_LinkStatus ( void )
 294          {
 295   1        if ( ESP8266_Cmd ( "AT+CIPSTATUS", "OK", 0, 1500 ) )
 296   1        {
 297   2          if ( strstr ( strEsp8266_Fram_Record .Data_RX_BUF, "2" ) )
 298   2            return 2;
 299   2          
 300   2          else if ( strstr ( strEsp8266_Fram_Record .Data_RX_BUF, "3" ) )
C51 COMPILER V9.60.0.0   BSP_ESP8266                                                       02/11/2020 20:55:49 PAGE 6   

 301   2            return 3;
 302   2          
 303   2          else if ( strstr ( strEsp8266_Fram_Record .Data_RX_BUF, "4" ) )
 304   2            return 4;   
 305   2      
 306   2        }
 307   1        
 308   1        return 0;
 309   1        
 310   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1535    ----
   CONSTANT SIZE    =    354    ----
   XDATA SIZE       =     42     185
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
